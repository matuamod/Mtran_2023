Grammar rules for syntax analyzer

program : PROGRAM variable SEMICOLON block DOT

block : declaration compound_statement

declaration : VAR (variable_declaration SEMICOLON)+
                | (PROCEDURE variable SEMICOLON block SEMICOLON)*    
                | empty

variable_declaration : variable (COMMA variable)* COLON variable_type

type_spec : INTEGER
                | REAL
                | CHAR
                | STRING
                | BOOLEAN
                | ARRAY

compound_statement : BEGIN statement_list END

statement_list : statement
                | statement SEMICOLON statement_list

statement : compound_statement
            | assignment_statement
            | comparison_statement
            | input_statement
            | output_statement
            | empty

input_statement : READLN RCURLY_BRACE (expr COMMA)* LCURLY_BRACE

output_statement : WRITELN RCURLY_BRACE (expr COMMA)* LCURLY_BRACE

assignment_statement : variable (ASSINGMENT
                                | PLUS_EQUAL
                                | MINUS_EQUAL
                                | MUL_EQUAL
                                | DIV_EQUAL) expr

comparison_statement : expr (EQUAL 
                                | NONEQUAL
                                | GREATER
                                | LESS
                                | GREATER_OR_EQUAL
                                | LESS_OR_EQUAL) expr

expr : term ((PLUS | MINUS) term)*

term : factor((MUL 
                | INTEGER_DIV 
                | FLOAT_DIV
                | XOR) factor)*

factor : PLUS factor
        | MINUS factor
        | INTEGER_CONST
        | REAL_CONST
        | CHAR_CONST
        | STRING_CONST
        | BOOLEAN_CONST
        | paren
        | variable

paren : LPAREN expr RPAREN

variable : ID

empty : 
